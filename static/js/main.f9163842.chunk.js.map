{"version":3,"sources":["spells/types/index.js","containers/Spells/SpellsSearchForm.tsx","containers/Spells/Spells.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["addIdToSpell","spellList","map","level","spell","Object","objectSpread","id","nanoid","holy","holySpells","arcaneSpells","SpellsSearchForm","props","react_default","a","createElement","formik_esm","initialValues","name","type","onSubmit","console","log","_ref","values","handleBlur","handleChange","handleSubmit","updateSearchFilter","className","onChange","onBlur","value","placeholder","Spells","_React$useState","React","useState","_React$useState2","slicedToArray","searchFilter","setSearchFilter","Spells_SpellsSearchForm","spellLevel","filter","toLowerCase","includes","key","App","containers_Spells_Spells","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"42IAIMA,EAAe,SAAAC,GAAS,OAC5BA,EAAUC,IAAI,SAAAC,GAAK,OAAIA,EAAMD,IAAI,SAAAE,GAAK,OAAAC,OAAAC,EAAA,EAAAD,CAAA,GAAUD,EAAV,CAAiBG,GAAIC,aAEhDC,EAAOT,EAAaU,MACXV,EAAaW,UCkCpBC,EAnCU,SAACC,GACxB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,cAAe,CAAEC,KAAM,GAAIC,KAAM,IAAMC,SAAUC,QAAQC,KAC9D,SAAAC,GAAwD,IAArDC,EAAqDD,EAArDC,OAAQC,EAA6CF,EAA7CE,WAAYC,EAAiCH,EAAjCG,aAAcC,EAAmBJ,EAAnBI,aAGpC,OAFAf,EAAMgB,mBAAmBJ,EAAON,KAAMM,EAAOL,MAG3CN,EAAAC,EAAAC,cAAA,QAAMK,SAAUO,GACdd,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACLD,KAAK,OACLW,UAAU,QACVC,SAAUJ,EACVK,OAAQN,EACRO,MAAOR,EAAON,KACde,YAAY,kBAEdpB,EAAAC,EAAAC,cAAA,UACEG,KAAK,OACLW,UAAU,QACVC,SAAUJ,EACVK,OAAQN,EACRO,MAAOR,EAAOL,MAEdN,EAAAC,EAAAC,cAAA,UAAQiB,MAAM,IAAd,iBACAnB,EAAAC,EAAAC,cAAA,UAAQiB,MAAM,QAAd,UACAnB,EAAAC,EAAAC,cAAA,UAAQiB,MAAM,UAAd,eCACE,EA5BA,SAACtB,GAAe,IAAAuB,EACWC,IAAMC,SAAS,CACrDnB,KAAM,GACNC,KAAM,KAHqBmB,EAAAlC,OAAAmC,EAAA,EAAAnC,CAAA+B,EAAA,GACtBK,EADsBF,EAAA,GACRG,EADQH,EAAA,GAc7B,OACEzB,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAC2B,EAAD,CAAkBd,mBAVK,SAACV,EAAcC,GACpCD,IAASsB,EAAatB,MAAQC,IAASqB,EAAarB,MAIxDsB,EAAgB,CAAEvB,OAAMC,YAMrBX,EAAKP,IAAI,SAAC0C,GAAD,OACRA,EACGC,OAAO,SAACzC,GAAD,OACNA,EAAMe,KAAK2B,cAAcC,SAASN,EAAatB,KAAK2B,iBAErD5C,IAAI,SAACE,GAAD,OAAgBU,EAAAC,EAAAC,cAAA,OAAKgC,IAAK5C,EAAMG,IAAKH,EAAMe,YCX3C8B,0LATX,OACEnC,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACkC,EAAD,cALUC,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f9163842.chunk.js","sourcesContent":["import nanoid from 'nanoid';\nimport holySpells from './holy.json';\nimport arcaneSpells from './arcane.json';\n\nconst addIdToSpell = spellList =>\n  spellList.map(level => level.map(spell => ({ ...spell, id: nanoid() })));\n\nexport const holy = addIdToSpell(holySpells);\nexport const arcane = addIdToSpell(arcaneSpells);\n","import React from 'react';\nimport { Formik } from 'formik';\n\ninterface SpellsSearchFormProps {\n  updateSearchFilter: (name: string, type: string) => any;\n}\n\nconst SpellsSearchForm = (props: SpellsSearchFormProps) => {\n  return (\n    <Formik initialValues={{ name: '', type: '' }} onSubmit={console.log}>\n      {({ values, handleBlur, handleChange, handleSubmit }) => {\n        props.updateSearchFilter(values.name, values.type);\n\n        return (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              name=\"name\"\n              className=\"field\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.name}\n              placeholder=\"Nome da magia\"\n            />\n            <select\n              name=\"type\"\n              className=\"field\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.type}\n            >\n              <option value=\"\">Tipo da magia</option>\n              <option value=\"holy\">Divina</option>\n              <option value=\"arcane\">Arcana</option>\n            </select>\n          </form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default SpellsSearchForm;\n","import React, { Component } from 'react';\n\nimport { holy } from '../../spells/types';\nimport SpellsSearchForm from './SpellsSearchForm';\n\nconst Spells = (props: any) => {\n  const [searchFilter, setSearchFilter] = React.useState({\n    name: '',\n    type: '',\n  });\n\n  const updateSearchFilter = (name: string, type: string) => {\n    if (name === searchFilter.name && type === searchFilter.type) {\n      return;\n    }\n\n    setSearchFilter({ name, type });\n  };\n\n  return (\n    <section>\n      <SpellsSearchForm updateSearchFilter={updateSearchFilter} />\n      {holy.map((spellLevel: any) =>\n        spellLevel\n          .filter((spell: any) =>\n            spell.name.toLowerCase().includes(searchFilter.name.toLowerCase()),\n          )\n          .map((spell: any) => <div key={spell.id}>{spell.name}</div>),\n      )}\n    </section>\n  );\n};\n\nexport default Spells;\n","import React, { Component } from 'react';\nimport Spells from './containers/Spells/Spells';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <section>\n        <h1>Spellbook</h1>\n        <Spells />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}