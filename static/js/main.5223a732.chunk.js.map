{"version":3,"sources":["spells/types/index.ts","spells/types/holy.ts","containers/Spells/SpellsSearchForm.tsx","containers/Spells/SpellCard.tsx","containers/Spells/Spells.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["holy","name","description","stats","map","level","spell","Object","objectSpread","id","nanoid","SpellsSearchForm","props","react_default","a","createElement","formik_esm","initialValues","type","onSubmit","console","log","_ref","values","handleBlur","handleChange","handleSubmit","updateSearchFilter","className","onChange","onBlur","value","placeholder","SpellCard","react","css","_templateObject","_templateObject2","join","Spells","_React$useState","React","useState","_React$useState2","slicedToArray","searchFilter","setSearchFilter","Spells_SpellsSearchForm","spellLevel","filter","toLowerCase","includes","index","Spells_SpellCard","key","App","containers_Spells_Spells","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5223a732.chunk.js","sourcesContent":["import nanoid from 'nanoid';\n\nimport Spell from './Spell';\nimport holySpellBook from './holy';\n\nconst addIdToSpell = (spellBook: Spell[][]) =>\n  spellBook.map((level: Spell[]) =>\n    level.map((spell: Spell) => ({ ...spell, id: nanoid() })),\n  );\n\nexport const holy = addIdToSpell(holySpellBook);\n","import Spell from './Spell';\n\nconst holySpellBook: Spell[][] = [\n  [\n    {\n      name: 'Apodrecimento',\n      description:\n        'Esta magia apodrece comida e bebida, deteriorando-a e tornando-a imprópria para o consumo.',\n      stats: ['Alcance: toque', 'Duração: permanente'],\n    },\n    {\n      name: 'Arma abençoada',\n      description:\n        'Esta magia permite ao clérigo abençoar qualquer arma natural de pedra ou de madeira não mágica, concedendo lhe um bônus de +1 no ataque. A arma abençoada recebe ainda um bônus de +1d4 no dano causado.',\n      stats: ['Alcance: toque', 'Duração: 1d4 turnos +1 turno/nível'],\n    },\n    {\n      name: 'Cativar animais',\n      description:\n        'Com esta magia é possível acalmar e conquistar a confiança de animais selvagens e criaturas não inteligentes. Os animais podem fazer uma jogada de proteção para resistir e mesmo assim apenas serão cativados caso a intenção do clérigo seja realmente sincera. Caso o clérigo esteja com segundas intenções (como enganar, comer, caçar, aprisionar e etc.), os animais perceberão e sequer precisarão fazer a jogada de proteção. Animais que forem cativados seguirão o clérigo, que pode ainda lhes treinar e ensinar pequenos truques.',\n      stats: [\n        'Alcance: raio de 3 metros + 1 metro/nível',\n        'Duração: permanente',\n        'Jogada de proteção: JP+SAB nega',\n      ],\n    },\n    {\n      name: 'Círculo de fé',\n      description:\n        'Com esta magia, um grupo de clérigos consegue ampliar os efeitos das magias lançadas pelo clérigo mais poderoso do grupo, que deve ficar ao centro enquanto os outros fazem um círculo com as mãos e entoam cânticos sagrados ao seu redor. O clérigo no centro do grupo lança o círculo de fé e, para cada clérigo que estiver compondo o círculo, será considerado como se fosse um nível mais alto, até um máximo de +5. O ganho de níveis também pode ser utilizado para afastar mortos-vivos, e os efeitos desse círculo durarão até o clérigo principal descansar.',\n      stats: ['Alcance: toque', 'Duração: especial (ver texto)'],\n    },\n    {\n      name: 'Comando',\n      description:\n        'Esta magia permite ao clérigo dar uma ordem simples e direta a um alvo que falhe em uma jogada de proteção modificada pela Sabedoria. A vítima deve entender a linguagem do clérigo e obedecerá à ordem cegamente. As ordens mais comuns costumam ser pare, volte, fuja, corra, caia, renda-se, etc.',\n      stats: [\n        'Alcance: raio de 10 metros + 3 metros/nível',\n        'Duração: 1d4 turnos + 1 turno/ nível',\n        'Jogada de proteção: JP+SAB nega',\n      ],\n    },\n    {\n      name: 'Constrição',\n      description:\n        'O clérigo consegue animar todas as plantas dentro de um raio de até 10 metros para que agarrem e apertem todos os seres vivos que passarem por ali. Todos que tentem se locomover terão sua movimentação reduzida em 1 metro para cada 6 turnos que passarem na área.',\n      stats: [\n        'Alcance: raio de 10 metros + 3 metros/nível',\n        'Duração: 1d6 turnos + 1 turno/nível',\n      ],\n    },\n    {\n      name: 'Criar água',\n      description: '',\n      stats: [],\n    },\n    {\n      name: 'Causar ferimentos',\n      description: '',\n      stats: [],\n    },\n    {\n      name: 'Curar ferimentos',\n      description: '',\n      stats: [],\n    },\n    {\n      name: 'Detectar alinhamento',\n      description: '',\n      stats: [],\n    },\n    {\n      name: 'Detectar magia',\n      description: '',\n      stats: [],\n    },\n    {\n      name: 'Detectar mortos-vivos',\n      description: '',\n      stats: [],\n    },\n    {\n      name: 'Detectar venenos',\n      description: '',\n      stats: [],\n    },\n    {\n      name: 'Luz',\n      description: '',\n      stats: [],\n    },\n    {\n      name: 'Proteção contra calor/frio',\n      description: '',\n      stats: [],\n    },\n    {\n      name: 'Proteção contra alinhamento',\n      description: '',\n      stats: [],\n    },\n    {\n      name: 'Purificar alimentos',\n      description: '',\n      stats: [],\n    },\n    {\n      name: 'Remover medo',\n      description: '',\n      stats: [],\n    },\n    {\n      name: 'Santuário',\n      description: '',\n      stats: [],\n    },\n  ],\n];\n\nexport default holySpellBook;\n","import React from 'react';\nimport { Formik } from 'formik';\n\ninterface SpellsSearchFormProps {\n  updateSearchFilter: (name: string, type: string) => any;\n}\n\nconst SpellsSearchForm = (props: SpellsSearchFormProps) => {\n  return (\n    <Formik initialValues={{ name: '', type: '' }} onSubmit={console.log}>\n      {({ values, handleBlur, handleChange, handleSubmit }) => {\n        props.updateSearchFilter(values.name, values.type);\n\n        return (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              name=\"name\"\n              className=\"field\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.name}\n              placeholder=\"Nome da magia\"\n            />\n            <select\n              name=\"type\"\n              className=\"field\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.type}\n            >\n              <option value=\"\">Tipo da magia</option>\n              <option value=\"holy\">Divina</option>\n              <option value=\"arcane\">Arcana</option>\n            </select>\n          </form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default SpellsSearchForm;\n","import React, { Fragment } from 'react';\nimport { css } from 'emotion';\n\nimport Spell from '../../spells/types/Spell';\n\ninterface SpellCardProps {\n  spell: Spell;\n}\n\nconst SpellCard = (props: SpellCardProps) => {\n  return (\n    <Fragment>\n      <div\n        className={css`\n          padding: 16px;\n          border-bottom: 1px solid #ccc;\n        `}\n      >\n        <h3>{props.spell.name}</h3>\n        <p\n          className={css`\n            font-style: italic;\n            margin: 8px 0;\n          `}\n        >\n          {props.spell.stats.join(' | ')}\n        </p>\n        <p>{props.spell.description}</p>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default SpellCard;\n","import React, { Fragment } from 'react';\n\nimport { holy } from '../../spells/types';\nimport SpellsSearchForm from './SpellsSearchForm';\nimport SpellCard from './SpellCard';\n\nconst getFilteredSpells = (name: string) =>\n  holy.map(spellLevel =>\n    spellLevel.filter(spell =>\n      spell.name.toLowerCase().includes(name.toLowerCase()),\n    ),\n  );\n\nconst Spells = () => {\n  const [searchFilter, setSearchFilter] = React.useState({\n    name: '',\n    type: '',\n  });\n\n  const updateSearchFilter = (name: string, type: string) => {\n    if (name === searchFilter.name && type === searchFilter.type) {\n      return;\n    }\n\n    setSearchFilter({ name, type });\n  };\n\n  return (\n    <section>\n      <SpellsSearchForm updateSearchFilter={updateSearchFilter} />\n      {getFilteredSpells(searchFilter.name).map((spellLevel, index) => (\n        <Fragment>\n          <h2>{index + 1}º círculo</h2>\n          {spellLevel.map(spell => (\n            <SpellCard key={spell.id} spell={spell} />\n          ))}\n        </Fragment>\n      ))}\n    </section>\n  );\n};\n\nexport default Spells;\n","import React, { Component } from 'react';\nimport Spells from './containers/Spells/Spells';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <section>\n        <h1>Spellbook</h1>\n        <Spells />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}